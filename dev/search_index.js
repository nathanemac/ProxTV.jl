var documenterSearchIndex = {"docs":
[{"location":"10-examples/","page":"Examples","title":"Examples","text":"CurrentModule = ProxTV","category":"page"},{"location":"10-examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"This page contains examples of how to use the ProxTV.jl package for various total variation proximal operator computations.","category":"page"},{"location":"10-examples/#1D-Total-Variation","page":"Examples","title":"1D Total Variation","text":"","category":"section"},{"location":"10-examples/#Basic-1D-TV-with-L1-norm","page":"Examples","title":"Basic 1D TV with L1 norm","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"using ProxTV\n\n# Generate random signal\nn = 100\ny = cumsum(randn(n)) # Random walk signal\nlambda = 2.0 # Regularization parameter\nx = zeros(n) # Output buffer\n\n# Compute proximal operator of TV-L1 norm\nProxTV.TV(y, lambda, x, 1.0)\n\n# x now contains the solution","category":"page"},{"location":"10-examples/#L2-norm-(Quadratic-Variation)","page":"Examples","title":"L2 norm (Quadratic Variation)","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"using ProxTV\n\nn = 100\ny = cumsum(randn(n))\nlambda = 2.0\nx = zeros(n)\n\n# Compute proximal operator with L2 norm\nProxTV.TV(y, lambda, x, 2.0)","category":"page"},{"location":"10-examples/#Custom-p-norm","page":"Examples","title":"Custom p-norm","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"using ProxTV\n\nn = 100\ny = cumsum(randn(n))\nlambda = 2.0\nx = zeros(n)\np = 1.5 # Custom p-value between 1 and 2\n\n# Compute proximal operator with custom p-norm\nProxTV.TV(y, lambda, x, p)","category":"page"},{"location":"10-examples/#Weighted-Total-Variation","page":"Examples","title":"Weighted Total Variation","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"using ProxTV\n\nn = 100\ny = cumsum(randn(n))\nw = ones(n-1) # Weights\nw[40:60] .= 3.0 # Increase regularization in the middle\nlambda = 1.0\nx = zeros(n)\n\n# Compute proximal operator with weighted TV\nProxTV.TV(y, lambda, w, x)","category":"page"},{"location":"10-examples/#Integration-with-ShiftedProximalOperators","page":"Examples","title":"Integration with ShiftedProximalOperators","text":"","category":"section"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"ProxTV.jl integrates with the ShiftedProximalOperators.jl package:","category":"page"},{"location":"10-examples/","page":"Examples","title":"Examples","text":"using ProxTV\nusing ShiftedProximalOperators\n\n# Create a TV norm function\nn = 100\ncontext = ProxTVContext(tv_func)\ntv_func = NormTVp(0.1, 1.32, context) # n, lambda, p\nshifted_tv_func = shifted(tv_func, ones(n))\n\n# Create input signal\ny = cumsum(randn(n))\n\n# Compute prox directly\nx = similar(y)\n\n# Note that the following might not work, since it is used internally by RegularizedOptimization with specific arguments.\nprox!(x, tv_func, y, 1.0)","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer Guide","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer Guide","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/nathanemac/ProxTV.jl","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer Guide","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer Guide","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer Guide","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer Guide","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer Guide","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer Guide","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer Guide","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer Guide","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/nathanemac/ProxTV.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer Guide","title":"Developer Guide","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/nathanemac/ProxTV.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"References","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"References","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"References","title":"References","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"References","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"References","title":"References","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#All-Package-Exports","page":"References","title":"All Package Exports","text":"","category":"section"},{"location":"95-reference/","page":"References","title":"References","text":"Modules = [ProxTV]\nOrder = [:constant, :function, :macro]\nFilter = t -> !(t in [\n    ProxTV.ModelFunction,\n    ProxTV.ProxTVContext,\n    ProxTV.InexactShiftedProximableFunction,\n    ProxTV.NormLp,\n    ProxTV.ShiftedNormLp,\n    ProxTV.NormTVp,\n    ProxTV.ShiftedNormTVp\n]) && !startswith(string(t), \"prox!\") &&\n       !startswith(string(t), \"shifted\") &&\n       !startswith(string(t), \"shift!\")","category":"page"},{"location":"95-reference/#ProxTV.TV","page":"References","title":"ProxTV.TV","text":"TV(y, lambda, x, p=1.0)\n\nCompute the proximal operator of the Total Variation (TV) regularization with any p-norm on a 1D signal.\n\nThis function computes the solution to the following optimization problem:\n\nmin_x frac12x-y_2^2 + lambdasum_i=1^n-1 x_i+1 - x_i^p\n\nArguments\n\ny: Input signal to denoise\nlambda: Regularization parameter (higher values give more smoothing)\nx: Pre-allocated output buffer to store the result\np: The p-norm value (default is 1.0 for L1 norm)\n\nReturns\n\nNothing, the result is stored in-place in the x parameter.\n\nExamples\n\nusing ProxTV\n\n# Generate random signal\nn = 100\ny = cumsum(randn(n)) # Random walk signal\nlambda = 2.0 # Regularization parameter\nx = zeros(n) # Output buffer\n\n# Compute proximal operator of TV-L1 norm\nProxTV.TV(y, lambda, x, 1.0)\n\n# For L2 norm (quadratic variation)\nx2 = zeros(n)\nProxTV.TV(y, lambda, x2, 2.0)\n\n# For custom p-norm\nx3 = zeros(n)\nProxTV.TV(y, lambda, x3, 1.5)\n\nSee also: TVp_norm\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#ProxTV.TV-NTuple{9, Any}","page":"References","title":"ProxTV.TV","text":"TV(y, lambda, x, info, n, p, ws, ctx, callback)\n\nCompute the proximal operator of the Total Variation (TV) regularization with any p-norm on a 1D signal, designed for internal use with InexactShiftedProximableFunction.\n\nReturns\n\n1 if the function was successful, 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.TVp_norm-Tuple{AbstractArray, Real}","page":"References","title":"ProxTV.TVp_norm","text":"TVp_norm(x::AbstractArray, p::Real)\n\nComputes the TVp norm of vector x with parameter p.\n\nArguments\n\nx: input vector\np: norm parameter\n\nReturns\n\nThe TVp norm value: (∑ᵢ |xᵢ₊₁ - xᵢ|ᵖ)^(1/p)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.default_proxTV_callback-Tuple{Ptr{Float64}, UInt64, Float64, Ptr{Nothing}}","page":"References","title":"ProxTV.default_proxTV_callback","text":"default_proxTV_callback(s_ptr::Ptr{Cdouble}, s_length::Csize_t, delta_k::Cdouble, ctx_ptr::Ptr{Cvoid})::Cint\n\nDefault callback function for ProxTV algorithm. Implements the stopping criterion based on the ratio between the duality gap and the model decrease.\n\nArguments\n\ns_ptr: Pointer to the current solution\ns_length: Length of the solution vector\ndelta_k: Current duality gap\nctx_ptr: Pointer to the ProxTVContext object\n\nReturns\n\nInt32(1) if the stopping criterion is satisfied\nInt32(0) otherwise\n\nNote\n\nThe stopping criterion is: δₖ ≤ ((1-κξ)/κξ) * ξₖ where ξₖ is the model decrease at iteration k\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.default_proxTV_callback_v2-Tuple{Ptr{Float64}, UInt64, Float64, Ptr{Nothing}}","page":"References","title":"ProxTV.default_proxTV_callback_v2","text":"default_proxTV_callback_v2(s_ptr::Ptr{Cdouble}, s_length::Csize_t, delta_k::Cdouble, ctx_ptr::Ptr{Cvoid})::Cint\n\nAlternative callback function for ProxTV algorithm. Uses a fixed duality gap threshold from the context and ensures the model decrease is non-negative.\n\nArguments\n\ns_ptr: Pointer to the current solution\ns_length: Length of the solution vector\ndelta_k: Current duality gap\nctx_ptr: Pointer to the ProxTVContext object\n\nReturns\n\nInt32(1) if the stopping criterion is satisfied\nInt32(0) otherwise\n\nNote\n\nThe stopping criterion is: (δₖ ≤ dualGap) && (ξₖ ≥ 0) where dualGap is fixed in the context\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.default_proxTV_callback_v3-Tuple{Ptr{Float64}, UInt64, Float64, Ptr{Nothing}}","page":"References","title":"ProxTV.default_proxTV_callback_v3","text":"default_proxTV_callback_v3(s_ptr::Ptr{Cdouble}, s_length::Csize_t, delta_k::Cdouble, ctx_ptr::Ptr{Cvoid})::Cint\n\nAdvanced callback function for ProxTV algorithm. Dynamically updates the duality gap threshold based on the model decrease while ensuring it remains non-negative.\n\nArguments\n\ns_ptr: Pointer to the current solution\ns_length: Length of the solution vector\ndelta_k: Current duality gap\nctx_ptr: Pointer to the ProxTVContext object\n\nReturns\n\nInt32(1) if the stopping criterion is satisfied\nInt32(0) otherwise\n\nNote\n\nThe stopping criterion is: (δₖ ≤ dualGap) && (ξₖ ≥ 0) where dualGap is dynamically updated as: min(dualGap, ((1-κξ)/κξ) * ξₖ)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.fun_name-Tuple{ShiftedNormLp}","page":"References","title":"ProxTV.fun_name","text":"fun_name(ψ::ShiftedNormLp)\nfun_expr(ψ::ShiftedNormLp)\nfun_params(ψ::ShiftedNormLp)\n\nUtility functions to get a string representation of the shifted Lp norm.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.fun_name-Tuple{ShiftedNormTVp}","page":"References","title":"ProxTV.fun_name","text":"fun_name(ψ::ShiftedNormTVp)\nfun_expr(ψ::ShiftedNormTVp)\nfun_params(ψ::ShiftedNormTVp)\n\nUtility functions to get a string representation of the shifted TV norm.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.update_prox_context!-Tuple{Any, Any, Any, Val{<:ShiftedNormLp}}","page":"References","title":"ProxTV.update_prox_context!","text":"update_prox_context!(solver, stats, ψ, T::Val{<:ShiftedNormLp})\n\nUpdates the context of a ShiftedNormLp object before calling prox!.\n\nArguments\n\nsolver: solver object\nstats: stats object\nψ: ShiftedNormLp object\nT: Type of the object\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.update_prox_context!-Tuple{Any, Any, Any, Val{<:ShiftedNormTVp}}","page":"References","title":"ProxTV.update_prox_context!","text":"update_prox_context!(solver, ψ, T::Val{<:ShiftedNormTVp})\n\nUpdates the context of a ShiftedNormTVp object before calling prox!.\n\nArguments\n\nsolver: solver object\nψ: ShiftedNormTVp object\nT: Type of the object\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ProxTV.update_prox_context!-Tuple{Any, Any, InexactShiftedProximableFunction}","page":"References","title":"ProxTV.update_prox_context!","text":"update_prox_context!(solver, stats, ψ)\n\nUpdates the context of an InexactShiftedProximableFunction object before calling prox!.\n\nArguments\n\nsolver: solver object\nψ: InexactShiftedProximableFunction object\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#Internal-Types-and-Functions","page":"References","title":"Internal Types and Functions","text":"","category":"section"},{"location":"95-reference/","page":"References","title":"References","text":"This section contains documentation for internal functions not typically used directly by users.","category":"page"},{"location":"95-reference/","page":"References","title":"References","text":"Modules = [ProxTV]\nPublic = false","category":"page"},{"location":"20-api-reference/","page":"API Reference","title":"API Reference","text":"CurrentModule = ProxTV","category":"page"},{"location":"20-api-reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"20-api-reference/","page":"API Reference","title":"API Reference","text":"This page contains reference documentation for the ProxTV.jl package.","category":"page"},{"location":"20-api-reference/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"20-api-reference/","page":"API Reference","title":"API Reference","text":"TV\nTVp_norm","category":"page"},{"location":"20-api-reference/#ProxTV.TV","page":"API Reference","title":"ProxTV.TV","text":"TV(y, lambda, x, info, n, p, ws, ctx, callback)\n\nCompute the proximal operator of the Total Variation (TV) regularization with any p-norm on a 1D signal, designed for internal use with InexactShiftedProximableFunction.\n\nReturns\n\n1 if the function was successful, 0 otherwise.\n\n\n\n\n\nTV(y, lambda, x, p=1.0)\n\nCompute the proximal operator of the Total Variation (TV) regularization with any p-norm on a 1D signal.\n\nThis function computes the solution to the following optimization problem:\n\nmin_x frac12x-y_2^2 + lambdasum_i=1^n-1 x_i+1 - x_i^p\n\nArguments\n\ny: Input signal to denoise\nlambda: Regularization parameter (higher values give more smoothing)\nx: Pre-allocated output buffer to store the result\np: The p-norm value (default is 1.0 for L1 norm)\n\nReturns\n\nNothing, the result is stored in-place in the x parameter.\n\nExamples\n\nusing ProxTV\n\n# Generate random signal\nn = 100\ny = cumsum(randn(n)) # Random walk signal\nlambda = 2.0 # Regularization parameter\nx = zeros(n) # Output buffer\n\n# Compute proximal operator of TV-L1 norm\nProxTV.TV(y, lambda, x, 1.0)\n\n# For L2 norm (quadratic variation)\nx2 = zeros(n)\nProxTV.TV(y, lambda, x2, 2.0)\n\n# For custom p-norm\nx3 = zeros(n)\nProxTV.TV(y, lambda, x3, 1.5)\n\nSee also: TVp_norm\n\n\n\n\n\n","category":"function"},{"location":"20-api-reference/#ProxTV.TVp_norm","page":"API Reference","title":"ProxTV.TVp_norm","text":"TVp_norm(x::AbstractArray, p::Real)\n\nComputes the TVp norm of vector x with parameter p.\n\nArguments\n\nx: input vector\np: norm parameter\n\nReturns\n\nThe TVp norm value: (∑ᵢ |xᵢ₊₁ - xᵢ|ᵖ)^(1/p)\n\n\n\n\n\n","category":"function"},{"location":"20-api-reference/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"20-api-reference/","page":"API Reference","title":"API Reference","text":"ModelFunction\nProxTVContext\nInexactShiftedProximableFunction\nNormLp\nShiftedNormLp\nNormTVp\nShiftedNormTVp","category":"page"},{"location":"20-api-reference/#ProxTV.ModelFunction","page":"API Reference","title":"ProxTV.ModelFunction","text":"ModelFunction{V,P}\n\nHelper structure to store the gradient and proximal term in a compact way. Used to avoid memory allocations when calling the proximal callback.\n\nFields\n\n∇f::V: gradient of the function\nψ::P: proximal term\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.ProxTVContext","page":"API Reference","title":"ProxTV.ProxTVContext","text":"ProxTVContext\n\nStructure for managing the context of ProxTV operations, including memory allocations and algorithm parameters.\n\nFields\n\nhk::Float64: current step size\nmk::ModelFunction: model function (gradient + proximal term)\nκξ::Float64: control parameter between 1/2 and 1\nshift::Vector{Float64}: shift vector\ns_k_unshifted::Vector{Float64}: current unshifted solution\ndualGap::Float64: target duality gap\nprox_stats::Any: statistics about iterations\ncallback_pointer::Ptr{Cvoid}: pointer to the C callback function\ninfo::Vector{Float64}: info array (3 elements)\ntemp_x::Vector{Float64}: temporary vector for computations\ny_shifted::Vector{Float64}: for shifted versions\ns::Vector{Float64}: to store s = x - xk - sj\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.InexactShiftedProximableFunction","page":"API Reference","title":"ProxTV.InexactShiftedProximableFunction","text":"InexactShiftedProximableFunction\n\nAbstract type for inexact proximal functions with shifts. Used for functions that require iterative computation of their proximal operator.\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.NormLp","page":"API Reference","title":"ProxTV.NormLp","text":"NormLp{T1,T2}\n\nStructure representing the Lp norm with parameter p and scaling factor λ.\n\nFields\n\nλ::T1: scaling factor (scalar or array)\np::T2: norm parameter (≥ 1)\ncontext::ProxTVContext: context for proximal computations\n\nConstructor\n\nNormLp(λ::T1, p::T2, context::ProxTVContext) where {T1,T2}\n\nExceptions\n\nArgumentError if λ < 0 (scalar) or if any element of λ is negative (array)\nArgumentError if p < 1\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.ShiftedNormLp","page":"API Reference","title":"ProxTV.ShiftedNormLp","text":"ShiftedNormLp{R,T,V0,V1,V2}\n\nStructure representing a shifted Lp norm.\n\nFields\n\nh::NormLp{R,T}: underlying Lp norm\nxk::V0: first shift\nsj::V1: second shift\nsol::V2: temporary solution\nshifted_twice::Bool: indicates if a second shift has been applied\nxsy::V2: temporary vector for computations\n\nNote\n\nThe context is accessible via h.context\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.NormTVp","page":"API Reference","title":"ProxTV.NormTVp","text":"NormTVp{T1,T2}\n\nStructure representing the Total Variation (TV) norm with parameter p and scaling factor λ.\n\nFields\n\nλ::T1: scaling factor (scalar or array)\np::T2: norm parameter (≥ 1)\ncontext::ProxTVContext: context for proximal computations\n\nConstructor\n\nNormTVp(λ::T1, p::T2, context::ProxTVContext) where {T1,T2}\n\nExceptions\n\nArgumentError if λ < 0 (scalar) or if any element of λ is negative (array)\nArgumentError if p < 1\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ProxTV.ShiftedNormTVp","page":"API Reference","title":"ProxTV.ShiftedNormTVp","text":"ShiftedNormTVp{R,T,V0,V1,V2}\n\nStructure representing a shifted TV norm.\n\nFields\n\nh::NormTVp{R,T}: underlying TV norm\nxk::V0: first shift\nsj::V1: second shift\nsol::V2: temporary solution\nshifted_twice::Bool: indicates if a second shift has been applied\nxsy::V2: temporary vector for computations\n\nNote\n\nThe context is accessible via h.context\n\n\n\n\n\n","category":"type"},{"location":"20-api-reference/#ShiftedProximalOperators-Integration","page":"API Reference","title":"ShiftedProximalOperators Integration","text":"","category":"section"},{"location":"20-api-reference/","page":"API Reference","title":"API Reference","text":"prox!\nshifted\nshift!","category":"page"},{"location":"20-api-reference/#ProximalCore.prox!","page":"API Reference","title":"ProximalCore.prox!","text":"prox!(y, h::NormLp, q, ν)\n\nEvaluates the proximity operator of an Lp norm.\n\nArguments\n\ny: Array in which to store the result\nh: NormLp object\nq: Vector to which the proximity operator is applied\nν: Scaling factor\n\nNote\n\nThe duality gap at the solution is guaranteed to be less than h.context.dualGap\n\n\n\n\n\nprox!(y, ψ::ShiftedNormLp, q, ν)\n\nEvaluates the proximity operator of a shifted Lp norm.\n\nArguments\n\ny: Array in which to store the result\nψ: ShiftedNormLp object\nq: Vector to which the proximity operator is applied\nν: Scaling factor\n\nNote\n\nUses the context from ψ.h for computations\n\n\n\n\n\nprox!(y, ψ::ShiftedNormTVp, q, ν)\n\nEvaluates the proximity operator of a shifted TV norm.\n\nArguments\n\ny: Array in which to store the result\nψ: ShiftedNormTVp object\nq: Vector to which the proximity operator is applied\nν: Scaling factor\n\nNote\n\nUses the context from ψ.h for computations\n\n\n\n\n\nprox!(y, ψ::Union{InexactShiftedProximableFunction, ShiftedProximableFunction}, q, ν)\n\nEvaluates the proximity operator of a shifted regularizer.\n\nArguments\n\ny: Array in which to store the result\nψ: Either a ShiftedProximableFunction or an InexactShiftedProximableFunction\nq: Vector to which the proximity operator is applied\nν: Scaling factor\n\nReturns\n\nThe solution is stored in the input vector y, which is also returned\n\nThrows\n\nErrorException if ψ is neither ShiftedProximableFunction nor InexactShiftedProximableFunction\n\n\n\n\n\n","category":"function"},{"location":"20-api-reference/#ShiftedProximalOperators.shifted","page":"API Reference","title":"ShiftedProximalOperators.shifted","text":"shifted(h::NormLp, xk::AbstractVector)\n\nCreates a ShiftedNormLp object with initial shift xk.\n\nArguments\n\nh: Lp norm to shift\nxk: shift vector\n\nReturns\n\nA new ShiftedNormLp object\n\n\n\n\n\nshifted(ψ::ShiftedNormLp, sj::AbstractVector)\n\nCreates a new ShiftedNormLp object by adding a second shift sj.\n\nArguments\n\nψ: already shifted Lp norm\nsj: second shift vector\n\nReturns\n\nA new ShiftedNormLp object with both shifts\n\n\n\n\n\nshifted(h::NormTVp, xk::AbstractVector)\n\nCreates a ShiftedNormTVp object with initial shift xk.\n\nArguments\n\nh: TV norm to shift\nxk: shift vector\n\nReturns\n\nA new ShiftedNormTVp object\n\n\n\n\n\nshifted(ψ::ShiftedNormTVp, sj::AbstractVector)\n\nCreates a new ShiftedNormTVp object by adding a second shift sj.\n\nArguments\n\nψ: already shifted TV norm\nsj: second shift vector\n\nReturns\n\nA new ShiftedNormTVp object with both shifts\n\n\n\n\n\nshifted(h::Union{NormLp, NormTVp}, xk::AbstractVector)\n\nCreates a shifted version of a norm.\n\nArguments\n\nh: norm to shift (either NormLp or NormTVp)\nxk: shift vector\n\nReturns\n\nA ShiftedNormLp if h is NormLp\nA ShiftedNormTVp if h is NormTVp\n\nThrows\n\nArgumentError if h is neither NormLp nor NormTVp\n\n\n\n\n\n","category":"function"},{"location":"20-api-reference/#ShiftedProximalOperators.shift!","page":"API Reference","title":"ShiftedProximalOperators.shift!","text":"shift!(ψ::Union{ShiftedNormLp,ShiftedNormTVp}, shift::Vector)\n\nUpdates the shift of a ShiftedNormLp or ShiftedNormTVp object.\n\nArguments\n\nψ: object to update\nshift: new shift vector\n\nNote\n\nUpdates either xk or sj depending on the value of shifted_twice\n\n\n\n\n\n","category":"function"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = ProxTV","category":"page"},{"location":"00-getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"ProxTV.jl is a Julia package that provides efficient implementations of proximal operators for total variation (TV)_p regularization and p-norms.","category":"page"},{"location":"00-getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"You can install ProxTV.jl using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"pkg> add ProxTV","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"Alternatively, you can use the Pkg API:","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.add(\"ProxTV\")","category":"page"},{"location":"00-getting-started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"The basic functionality of ProxTV.jl is to compute the proximal operator of the total variation regularization. The simplest usage is with 1D signals:","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"using ProxTV\n\n# Generate a random signal\nn = 100\ny = cumsum(randn(n)) # Random walk signal (noisy)\n\n# Set regularization parameter\nlambda = 2.0\n\n# Allocate output buffer\nx = zeros(n)\n\n# Compute proximal operator of TV-L1 norm (default)\nProxTV.TV(y, lambda, x)\n\n# x now contains the denoised signal","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"This computes the solution to:","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"min_x frac12x-y_2^2 + lambdasum_i=1^n-1 x_i+1 - x_i","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"which is the proximal operator of the L1 total variation norm with parameter λ.","category":"page"},{"location":"00-getting-started/#More-Examples","page":"Getting Started","title":"More Examples","text":"","category":"section"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"See the Examples page for more detailed usage examples, including:","category":"page"},{"location":"00-getting-started/","page":"Getting Started","title":"Getting Started","text":"TV regularization with different p-norms\n2D total variation for image processing\nWeighted total variation\nIntegration with ShiftedProximalOperators.jl","category":"page"},{"location":"90-contributing/#contributing","page":"Guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"Be polite and respectful.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Guidelines","title":"Guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProxTV","category":"page"},{"location":"#ProxTV.jl","page":"Home","title":"ProxTV.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ProxTV.jl is a Julia package that provides efficient implementations of proximal operators for total variation (TV) regularization with various p-norms.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Total Variation regularization is widely used in signal and image processing for denoising, smoothing, and feature detection while preserving sharp transitions. This package offers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Efficient computation of TV proximal operators for 1D and 2D signals\nSupport for different p-norms (L1, L2, and custom p-norms)\nWeighted regularization\nIntegration with the ShiftedProximalOperators.jl package","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting Started - Installation and basic usage\nExamples - Practical examples demonstrating different use cases\nAPI Reference - Complete reference of functions and types\nContributing - Guidelines for contributing to the project\nDeveloper Guide - Technical information for developers","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Efficient Implementation: Based on algorithms from the original ProxTV package\nVersatile Interface: Support for different norms and problem dimensions\nJulia Integration: Designed to work well with Julia's type system and other packages","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use ProxTV.jl in your research, please cite:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{allaire2025proxtv,\n  author = {Allaire, Nathan},\n  title = {ProxTV.jl: Efficient Proximal Operators for Total Variation Regularization},\n  url = {https://github.com/nathanemac/ProxTV.jl},\n  year = {2025}\n}","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
